
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 04 12:29:17 VET 2014
//----------------------------------------------------

package paquete;

import java_cup.runtime.*;
import java.io.FileReader;
import AST.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 04 12:29:17 VET 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\003\000\002\002\004\000\002\010" +
    "\005\000\002\010\003\000\002\011\003\000\002\011\003" +
    "\000\002\007\005\000\002\007\003\000\002\006\005\000" +
    "\002\006\003\000\002\003\005\000\002\003\003\000\002" +
    "\004\005\000\002\004\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\005\004\000\002\012\005" +
    "\000\002\012\003\000\002\013\005\000\002\013\003\000" +
    "\002\014\004\000\002\014\003\000\002\015\005\000\002" +
    "\015\003\000\002\017\003\000\002\017\003\000\002\016" +
    "\005\000\002\016\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\005\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\005\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\005" +
    "\000\002\025\005\000\002\025\003\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\012\005\004\007\015\034\007\035\013\001" +
    "\002\000\020\002\ufff1\005\112\010\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\001\002\000\016\002\ufffa\010\ufffa\030" +
    "\ufffa\031\ufffa\032\026\033\ufffa\001\002\000\016\002\ufff6" +
    "\010\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\001\002\000" +
    "\004\005\106\001\002\000\010\002\001\030\020\031\022" +
    "\001\002\000\004\002\104\001\002\000\014\002\ufffe\010" +
    "\ufffe\030\ufffe\031\ufffe\033\024\001\002\000\016\004\036" +
    "\005\030\006\037\007\044\027\042\036\045\001\002\000" +
    "\016\002\ufff8\010\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\001\002\000\012\005\004\007\015\034\007\035\013\001" +
    "\002\000\010\010\021\030\020\031\022\001\002\000\012" +
    "\005\004\007\015\034\007\035\013\001\002\000\012\005" +
    "\ufffc\007\ufffc\034\ufffc\035\ufffc\001\002\000\016\002\ufff2" +
    "\010\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\001\002\000" +
    "\012\005\ufffd\007\ufffd\034\ufffd\035\ufffd\001\002\000\014" +
    "\002\uffff\010\uffff\030\uffff\031\uffff\033\024\001\002\000" +
    "\012\005\004\007\015\034\007\035\013\001\002\000\016" +
    "\002\ufffb\010\ufffb\030\ufffb\031\ufffb\032\026\033\ufffb\001" +
    "\002\000\012\005\004\007\015\034\007\035\013\001\002" +
    "\000\016\002\ufff9\010\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\001\002\000\044\005\uffd6\007\uffd6\010\uffd6\012\102" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\035\uffd6" +
    "\001\002\000\042\005\uffde\007\uffde\010\uffde\013\uffde\014" +
    "\074\015\075\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\035\uffde\001\002\000" +
    "\016\005\uffec\007\uffec\010\uffec\025\uffec\026\uffec\035\uffec" +
    "\001\002\000\012\005\004\007\015\025\052\035\013\001" +
    "\002\000\036\005\uffe4\007\uffe4\010\uffe4\013\072\016\070" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\035\uffe4\001\002\000\032\005\uffe8\007\uffe8" +
    "\010\uffe8\017\063\020\062\021\065\022\066\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\035\uffe8\001\002\000\042\005\uffd7" +
    "\007\uffd7\010\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\035\uffd7\001\002\000\042\005\uffd3\007\uffd3\010" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\035" +
    "\uffd3\001\002\000\016\005\uffee\007\uffee\010\uffee\025\uffee" +
    "\026\054\035\uffee\001\002\000\042\005\uffda\007\uffda\010" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\035" +
    "\uffda\001\002\000\016\004\036\005\030\006\037\007\044" +
    "\027\042\036\045\001\002\000\022\005\uffea\007\uffea\010" +
    "\uffea\023\057\024\056\025\uffea\026\uffea\035\uffea\001\002" +
    "\000\016\004\036\005\030\006\037\007\044\027\042\036" +
    "\045\001\002\000\004\005\046\001\002\000\004\036\047" +
    "\001\002\000\042\005\uffd4\007\uffd4\010\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\035\uffd4\001\002\000" +
    "\006\010\051\025\052\001\002\000\042\005\uffd2\007\uffd2" +
    "\010\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\035\uffd2\001\002\000\016\004\036\005\030\006\037\007" +
    "\044\027\042\036\045\001\002\000\016\005\uffef\007\uffef" +
    "\010\uffef\025\uffef\026\054\035\uffef\001\002\000\016\004" +
    "\036\005\030\006\037\007\044\027\042\036\045\001\002" +
    "\000\016\005\uffed\007\uffed\010\uffed\025\uffed\026\uffed\035" +
    "\uffed\001\002\000\014\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\036\uffe7\001\002\000\014\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\036\uffe6\001\002\000\014\004\036\005\030\006\037" +
    "\007\044\036\045\001\002\000\032\005\uffe9\007\uffe9\010" +
    "\uffe9\017\063\020\062\021\065\022\066\023\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\035\uffe9\001\002\000\014\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\036\uffe0\001\002\000\014\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\036\uffe1\001\002\000\014\004" +
    "\036\005\030\006\037\007\044\036\045\001\002\000\014" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\036\uffe3\001\002\000" +
    "\014\004\uffe2\005\uffe2\006\uffe2\007\uffe2\036\uffe2\001\002" +
    "\000\036\005\uffe5\007\uffe5\010\uffe5\013\072\016\070\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\035\uffe5\001\002\000\014\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\036\uffdc\001\002\000\014\004\036\005\030" +
    "\006\037\007\044\036\045\001\002\000\014\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\036\uffdd\001\002\000\042\005\uffdf" +
    "\007\uffdf\010\uffdf\013\uffdf\014\074\015\075\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\035\uffdf\001\002\000\014\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\036\uffd9\001\002\000\014\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\036\uffd8\001\002\000\014\004\036\005" +
    "\030\006\037\007\044\036\045\001\002\000\042\005\uffdb" +
    "\007\uffdb\010\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\035\uffdb\001\002\000\016\005\uffeb\007\uffeb\010" +
    "\uffeb\025\uffeb\026\uffeb\035\uffeb\001\002\000\016\002\ufff3" +
    "\010\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\001\002\000" +
    "\004\005\103\001\002\000\042\005\uffd5\007\uffd5\010\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\035\uffd5" +
    "\001\002\000\004\002\000\001\002\000\012\005\004\007" +
    "\015\034\007\035\013\001\002\000\014\005\ufff4\007\ufff4" +
    "\011\107\034\ufff4\035\ufff4\001\002\000\004\005\106\001" +
    "\002\000\012\005\ufff5\007\ufff5\034\ufff5\035\ufff5\001\002" +
    "\000\016\002\ufff7\010\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\001\002\000\016\002\ufff0\010\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\016\002\010\003\013\005\005\006\004\007" +
    "\011\010\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\104\001\001\000\004\011" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\032\013\037\014\031\015\042\016\034\021\033\023" +
    "\030\025\040\001\001\000\002\001\001\000\014\003\013" +
    "\005\005\006\004\007\011\010\015\001\001\000\004\011" +
    "\016\001\001\000\012\003\013\005\005\006\004\007\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\013\005\005\006\024" +
    "\001\001\000\002\001\001\000\006\003\026\005\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\075" +
    "\001\001\000\002\001\001\000\004\005\100\001\001\000" +
    "\004\022\070\001\001\000\004\020\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\077\015\042\016\034\021\033\023\030" +
    "\025\040\001\001\000\004\017\057\001\001\000\022\012" +
    "\047\013\037\014\031\015\042\016\034\021\033\023\030" +
    "\025\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\052\014\031\015\042\016\034\021\033\023\030\025" +
    "\040\001\001\000\002\001\001\000\016\014\054\015\042" +
    "\016\034\021\033\023\030\025\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\060" +
    "\021\033\023\030\025\040\001\001\000\004\020\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\066" +
    "\023\030\025\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\070\001\001\000\002\001\001\000\006" +
    "\023\072\025\040\001\001\000\002\001\001\000\004\024" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\110\005\005\001\001\000\002\001" +
    "\001\000\004\004\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  private boolean debug=true;
  private NodoBase ast = null;
  private int lineanum=0;
  
  //Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
  public NodoBase getASTroot(){
    return ast;
  }
  

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= IPAREN exp_or DPAREN 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= FECHA 
            {
              NodoBase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoFecha(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= COMILLA CADENA COMILLA 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 c.setTipo("cadena");RESULT = new NodoCadena(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= CADENA PUNTO CADENA 
            {
              NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoAtributo(a,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= CADENA 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoAtributo(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= NUMERO 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if(valor!=null)
                                {
				   RESULT= new NodoNumero(valor);					
				}
                                
                                else{
				    RESULT = null;
				    System.out.println("Ocurrio error en cup # 0005");
				    }
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opmult ::= DIVI 
            {
              NodoOpBi RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT=new NodoOpBi(null,d,null);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmult",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // opmult ::= MULTI 
            {
              NodoOpBi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new NodoOpBi(null,t,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmult",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // termino ::= factor 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // termino ::= termino opmult factor 
            {
              NodoBase RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase i = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodoOpmulleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoOpmulright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoOpBi nodoOpmul = (NodoOpBi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                              
                                     nodoOpmul.setHijoIzquierdo(i);
                                     nodoOpmul.setHijoDerecho(d);    
                                     RESULT=nodoOpmul;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // opsuma ::= RESTA 
            {
              NodoOpBi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new NodoOpBi(null,t,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opsuma",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opsuma ::= SUMA 
            {
              NodoOpBi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new NodoOpBi(null,t,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opsuma",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp_suma ::= termino 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_suma",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp_suma ::= exp_suma opsuma termino 
            {
              NodoBase RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase i = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodoOpsuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoOpsuright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoOpBi nodoOpsu = (NodoOpBi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                              
                                     nodoOpsu.setHijoIzquierdo(i);
                                     nodoOpsu.setHijoDerecho(d);    
                                     RESULT=nodoOpsu;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_suma",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opmenmay ::= MAYORIGUAL 
            {
              NodoOpBi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new NodoOpBi(null,t,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmenmay",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opmenmay ::= MENORIGUAL 
            {
              NodoOpBi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new NodoOpBi(null,t,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmenmay",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opmenmay ::= MAYOR 
            {
              NodoOpBi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new NodoOpBi(null,t,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmenmay",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // opmenmay ::= MENOR 
            {
              NodoOpBi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new NodoOpBi(null,t,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opmenmay",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_menmay ::= exp_suma 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_menmay",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_menmay ::= exp_menmay opmenmay exp_suma 
            {
              NodoBase RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase i = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodoOpmmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoOpmmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoOpBi nodoOpmm = (NodoOpBi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                              
                                     nodoOpmm.setHijoIzquierdo(i);
                                     nodoOpmm.setHijoDerecho(d);    
                                     RESULT=nodoOpmm;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_menmay",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opigdi ::= DIFERENTE 
            {
              NodoOpBi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new NodoOpBi(null,t,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opigdi",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opigdi ::= EQ 
            {
              NodoOpBi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new NodoOpBi(null,t,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opigdi",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp_igdi ::= exp_menmay 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_igdi",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp_igdi ::= exp_igdi opigdi exp_menmay 
            {
              NodoBase RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase i = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodoOpigdileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoOpigdiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoOpBi nodoOpigdi = (NodoOpBi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                              
                                     nodoOpigdi.setHijoIzquierdo(i);
                                     nodoOpigdi.setHijoDerecho(d);    
                                     RESULT=nodoOpigdi;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_igdi",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp_not ::= exp_igdi 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_not",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp_not ::= NOT exp_not 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                              
                                     RESULT= new NodoNot(t,d);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_not",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp_and ::= exp_not 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_and",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp_and ::= exp_and AND exp_not 
            {
              NodoBase RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase i = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                              
                                     RESULT= new NodoOpBi(i,t,d);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_and",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp_or ::= exp_and 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_or",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp_or ::= exp_or OR exp_and 
            {
              NodoBase RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase i = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                                      RESULT= new NodoOpBi(i,t,d);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_or",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp_sel ::= CADENA CADENA 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoRelacion(c,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_sel",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp_sel ::= CADENA 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NodoRelacion(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_sel",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp_sel ::= IPAREN exp_opud DPAREN 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_sel",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp_sel ::= SEL exp_or exp_sel 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase i = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                                        RESULT= new NodoOpBi(i,t,d);
                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_sel",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sec_atrib ::= CADENA 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoAtributo(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sec_atrib",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sec_atrib ::= CADENA COMA sec_atrib 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        
                                         RESULT= new NodoAtributo(c,d);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sec_atrib",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp_pro ::= exp_sel 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_pro",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp_pro ::= PRO sec_atrib exp_pro 
            {
              NodoBase RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase i = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                                            RESULT= new NodoOpBi(i,t,d);
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_pro",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp_procar ::= exp_pro 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_procar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp_procar ::= exp_procar PROC exp_pro 
            {
              NodoBase RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase i = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                                            RESULT= new NodoOpBi(i,t,d);
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_procar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp_int ::= exp_procar 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_int",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp_int ::= exp_int INT exp_procar 
            {
              NodoBase RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase i = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                                            RESULT= new NodoOpBi(i,t,d);
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_int",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opud ::= DIF 
            {
              NodoOpBi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new NodoOpBi(null,t,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opud",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opud ::= UNI 
            {
              NodoOpBi RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new NodoOpBi(null,t,null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opud",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp_opud ::= exp_int 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_opud",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp_opud ::= exp_opud opud exp_int 
            {
              NodoBase RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase i = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodoOpudleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoOpudright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoOpBi nodoOpud = (NodoOpBi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            nodoOpud.setHijoIzquierdo(i);
                                            nodoOpud.setHijoDerecho(d);    
                                            RESULT=nodoOpud;
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_opud",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= consulta EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase start_val = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // consulta ::= exp_opud 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ast=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consulta",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

